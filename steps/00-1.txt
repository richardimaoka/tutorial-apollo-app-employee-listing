cd $(git rev-parse --show-toplevel)

## サーバー側 graphql 導入

mkdir server
cd server
echo "node_modules" >> .gitignore

npm init -yes
npm install --save-dev typescript ts-node-dev 
npx tsc -init

npm install apollo-server graphql
//setup index.ts, data.json, schema.gql
touch index.ts 
```
import { ApolloServer, gql } from "apollo-server";
import * as fs from "fs";

const typeDefs = gql`
  ${fs.readFileSync(__dirname.concat("/schema.gql"), "utf8")}
`;

const server = new ApolloServer({
  typeDefs,
  mocks: true,
});

// The `listen` method launches a web server.
server.listen().then(({ url }) => {
  console.log(`🚀  Server ready at ${url}`);
});
```

touch schema.gql
```
type Query {
  hello: String
}
```

echo "{}" > data.json


npm set-script server-start "ts-node-dev --watch schema.gql,data.json --respawn index.ts"
npm run server-start
Ctrl+C





## クライアント側
cd ../

npx --yes create-react-app client --template typescript
cd client

# https://github.com/apollographql/invariant-packages/issues/279
# WARNING in ./node_modules/ts-invariant/lib/invariant.js
npm install @apollo/client graphql
npm set-script client-start "react-scripts start"
npm run client-start
Ctrl+C




## file-server 導入

cd ../

mkdir file-server
cd file-server
echo "node_modules" >> .gitignore

npm init -yes
npm install http-server
npm set-script http-server-start "http-server"


## start.sh 作成


cat << EOF > start.sh
  ...
  ...
  ...

chmod +x start.sh