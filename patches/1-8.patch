commit 2f0dd340d0af24e915b5a2e1ac2180bac0364d24
Author: Richard Imaoka <richard.e.imaoka@gmail.com>
Date:   Tue May 3 23:23:30 2022 +0900

    s: divisions from data.json

diff --git a/server/data.json b/server/data.json
index 0967ef4..c5b39cd 100644
--- a/server/data.json
+++ b/server/data.json
@@ -1 +1,58 @@
-{}
+[
+  {
+    "divisionName": "trading",
+    "divisionDisplayName": "トレーディング部門",
+    "divisionDisplayNameEn": "Trading",
+    "numDepartments": 4,
+    "numMembers": 105
+  },
+  {
+    "divisionName": "sales",
+    "divisionDisplayName": "セールス部門",
+    "divisionDisplayNameEn": "Sales",
+    "numDepartments": 11,
+    "numMembers": 201
+  },
+  {
+    "divisionName": "operations",
+    "divisionDisplayName": "業務部門",
+    "divisionDisplayNameEn": "Operations",
+    "numDepartments": 32,
+    "numMembers": 1005
+  },
+  {
+    "divisionName": "accounting",
+    "divisionDisplayName": "会計部門",
+    "divisionDisplayNameEn": "Accounting",
+    "numDepartments": 13,
+    "numMembers": 310
+  },
+  {
+    "divisionName": "risk",
+    "divisionDisplayName": "リスク管理部門",
+    "divisionDisplayNameEn": "Risk",
+    "numDepartments": 9,
+    "numMembers": 160
+  },
+  {
+    "divisionName": "legal",
+    "divisionDisplayName": "法務部門",
+    "divisionDisplayNameEn": "Legal",
+    "numDepartments": 1,
+    "numMembers": 32
+  },
+  {
+    "divisionName": "information-technology",
+    "divisionDisplayName": "IT部門",
+    "divisionDisplayNameEn": "IT",
+    "numDepartments": 25,
+    "numMembers": 880
+  },
+  {
+    "divisionName": "executive-office",
+    "divisionDisplayName": "社長室",
+    "divisionDisplayNameEn": "Executive Office",
+    "numDepartments": 1,
+    "numMembers": 14
+  }
+]
diff --git a/server/generated/graphql.ts b/server/generated/graphql.ts
new file mode 100644
index 0000000..bed6861
--- /dev/null
+++ b/server/generated/graphql.ts
@@ -0,0 +1,201 @@
+import { GraphQLResolveInfo } from "graphql";
+export type Maybe<T> = T | null;
+export type InputMaybe<T> = Maybe<T>;
+export type Exact<T extends { [key: string]: unknown }> = {
+  [K in keyof T]: T[K];
+};
+export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
+  [SubKey in K]?: Maybe<T[SubKey]>;
+};
+export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
+  [SubKey in K]: Maybe<T[SubKey]>;
+};
+/** All built-in and custom scalars, mapped to their actual values */
+export type Scalars = {
+  ID: string;
+  String: string;
+  Boolean: boolean;
+  Int: number;
+  Float: number;
+};
+
+export type Division = {
+  __typename?: "Division";
+  divisionDisplayName: Maybe<Scalars["String"]>;
+  divisionDisplayNameEn: Maybe<Scalars["String"]>;
+  divisionName: Maybe<Scalars["String"]>;
+  numDepartments: Maybe<Scalars["Int"]>;
+  numMembers: Maybe<Scalars["Int"]>;
+};
+
+export type Query = {
+  __typename?: "Query";
+  divisions: Maybe<Array<Maybe<Division>>>;
+};
+
+export type ResolverTypeWrapper<T> = Promise<T> | T;
+
+export type ResolverWithResolve<TResult, TParent, TContext, TArgs> = {
+  resolve: ResolverFn<TResult, TParent, TContext, TArgs>;
+};
+export type Resolver<TResult, TParent = {}, TContext = {}, TArgs = {}> =
+  | ResolverFn<TResult, TParent, TContext, TArgs>
+  | ResolverWithResolve<TResult, TParent, TContext, TArgs>;
+
+export type ResolverFn<TResult, TParent, TContext, TArgs> = (
+  parent: TParent,
+  args: TArgs,
+  context: TContext,
+  info: GraphQLResolveInfo
+) => Promise<TResult> | TResult;
+
+export type SubscriptionSubscribeFn<TResult, TParent, TContext, TArgs> = (
+  parent: TParent,
+  args: TArgs,
+  context: TContext,
+  info: GraphQLResolveInfo
+) => AsyncIterable<TResult> | Promise<AsyncIterable<TResult>>;
+
+export type SubscriptionResolveFn<TResult, TParent, TContext, TArgs> = (
+  parent: TParent,
+  args: TArgs,
+  context: TContext,
+  info: GraphQLResolveInfo
+) => TResult | Promise<TResult>;
+
+export interface SubscriptionSubscriberObject<
+  TResult,
+  TKey extends string,
+  TParent,
+  TContext,
+  TArgs
+> {
+  subscribe: SubscriptionSubscribeFn<
+    { [key in TKey]: TResult },
+    TParent,
+    TContext,
+    TArgs
+  >;
+  resolve?: SubscriptionResolveFn<
+    TResult,
+    { [key in TKey]: TResult },
+    TContext,
+    TArgs
+  >;
+}
+
+export interface SubscriptionResolverObject<TResult, TParent, TContext, TArgs> {
+  subscribe: SubscriptionSubscribeFn<any, TParent, TContext, TArgs>;
+  resolve: SubscriptionResolveFn<TResult, any, TContext, TArgs>;
+}
+
+export type SubscriptionObject<
+  TResult,
+  TKey extends string,
+  TParent,
+  TContext,
+  TArgs
+> =
+  | SubscriptionSubscriberObject<TResult, TKey, TParent, TContext, TArgs>
+  | SubscriptionResolverObject<TResult, TParent, TContext, TArgs>;
+
+export type SubscriptionResolver<
+  TResult,
+  TKey extends string,
+  TParent = {},
+  TContext = {},
+  TArgs = {}
+> =
+  | ((
+      ...args: any[]
+    ) => SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>)
+  | SubscriptionObject<TResult, TKey, TParent, TContext, TArgs>;
+
+export type TypeResolveFn<TTypes, TParent = {}, TContext = {}> = (
+  parent: TParent,
+  context: TContext,
+  info: GraphQLResolveInfo
+) => Maybe<TTypes> | Promise<Maybe<TTypes>>;
+
+export type IsTypeOfResolverFn<T = {}, TContext = {}> = (
+  obj: T,
+  context: TContext,
+  info: GraphQLResolveInfo
+) => boolean | Promise<boolean>;
+
+export type NextResolverFn<T> = () => Promise<T>;
+
+export type DirectiveResolverFn<
+  TResult = {},
+  TParent = {},
+  TContext = {},
+  TArgs = {}
+> = (
+  next: NextResolverFn<TResult>,
+  parent: TParent,
+  args: TArgs,
+  context: TContext,
+  info: GraphQLResolveInfo
+) => TResult | Promise<TResult>;
+
+/** Mapping between all available schema types and the resolvers types */
+export type ResolversTypes = {
+  Boolean: ResolverTypeWrapper<Scalars["Boolean"]>;
+  Division: ResolverTypeWrapper<Division>;
+  Int: ResolverTypeWrapper<Scalars["Int"]>;
+  Query: ResolverTypeWrapper<{}>;
+  String: ResolverTypeWrapper<Scalars["String"]>;
+};
+
+/** Mapping between all available schema types and the resolvers parents */
+export type ResolversParentTypes = {
+  Boolean: Scalars["Boolean"];
+  Division: Division;
+  Int: Scalars["Int"];
+  Query: {};
+  String: Scalars["String"];
+};
+
+export type DivisionResolvers<
+  ContextType = any,
+  ParentType extends ResolversParentTypes["Division"] = ResolversParentTypes["Division"]
+> = {
+  divisionDisplayName: Resolver<
+    Maybe<ResolversTypes["String"]>,
+    ParentType,
+    ContextType
+  >;
+  divisionDisplayNameEn: Resolver<
+    Maybe<ResolversTypes["String"]>,
+    ParentType,
+    ContextType
+  >;
+  divisionName: Resolver<
+    Maybe<ResolversTypes["String"]>,
+    ParentType,
+    ContextType
+  >;
+  numDepartments: Resolver<
+    Maybe<ResolversTypes["Int"]>,
+    ParentType,
+    ContextType
+  >;
+  numMembers: Resolver<Maybe<ResolversTypes["Int"]>, ParentType, ContextType>;
+  __isTypeOf?: IsTypeOfResolverFn<ParentType, ContextType>;
+};
+
+export type QueryResolvers<
+  ContextType = any,
+  ParentType extends ResolversParentTypes["Query"] = ResolversParentTypes["Query"]
+> = {
+  divisions: Resolver<
+    Maybe<Array<Maybe<ResolversTypes["Division"]>>>,
+    ParentType,
+    ContextType
+  >;
+};
+
+export type Resolvers<ContextType = any> = {
+  Division: DivisionResolvers<ContextType>;
+  Query: QueryResolvers<ContextType>;
+};
diff --git a/server/index.ts b/server/index.ts
index 78c0639..a0c5359 100644
--- a/server/index.ts
+++ b/server/index.ts
@@ -1,13 +1,47 @@
 import { ApolloServer, gql } from "apollo-server";
 import * as fs from "fs";
+import { Division, QueryResolvers } from "./generated/graphql";
 
 const typeDefs = gql`
   ${fs.readFileSync(__dirname.concat("/schema.gql"), "utf8")}
 `;
 
+interface ServerContext {
+  divisions: Division[];
+}
+
+const resolvers: { Query: QueryResolvers<ServerContext> } = {
+  Query: {
+    divisions: async (parent, args, context, info) => {
+      console.log(`divisions`);
+
+      return context.divisions;
+    },
+  },
+};
+
+const readJsonFile = async (relativeFileName: string): Promise<any> => {
+  const jsonDataFile = __dirname.concat(relativeFileName);
+  const fileContent = await fs.promises.readFile(jsonDataFile, "utf8");
+  const jsonData = JSON.parse(fileContent);
+  return jsonData;
+};
+
 const server = new ApolloServer({
   typeDefs,
-  mocks: true,
+  resolvers,
+  context: async ({ req }: any) => {
+    try {
+      const divisions = await readJsonFile("/data.json");
+      return {
+        divisions,
+      };
+    } catch (err) {
+      console.log("***ERROR OCURRED***");
+      console.log(err);
+      throw new Error("internal error happened!!");
+    }
+  },
 });
 
 // The `listen` method launches a web server.
